/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ContactsInterface extends Interface {
  getFunction(
    nameOrSignature: "_admin" | "contacts" | "createContact"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ContactCreated" | "Received"
  ): EventFragment;

  encodeFunctionData(functionFragment: "_admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "contacts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createContact",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "_admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "contacts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createContact",
    data: BytesLike
  ): Result;
}

export namespace ContactCreatedEvent {
  export type InputTuple = [name: string, email: string, phone: BigNumberish];
  export type OutputTuple = [name: string, email: string, phone: bigint];
  export interface OutputObject {
    name: string;
    email: string;
    phone: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReceivedEvent {
  export type InputTuple = [sender: AddressLike, amount: BigNumberish];
  export type OutputTuple = [sender: string, amount: bigint];
  export interface OutputObject {
    sender: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Contacts extends BaseContract {
  connect(runner?: ContractRunner | null): Contacts;
  waitForDeployment(): Promise<this>;

  interface: ContactsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _admin: TypedContractMethod<[], [string], "view">;

  contacts: TypedContractMethod<
    [arg0: BigNumberish],
    [[string, string, bigint] & { name: string; email: string; phone: bigint }],
    "view"
  >;

  createContact: TypedContractMethod<
    [_name: string, _email: string, _phone: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "contacts"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[string, string, bigint] & { name: string; email: string; phone: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "createContact"
  ): TypedContractMethod<
    [_name: string, _email: string, _phone: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ContactCreated"
  ): TypedContractEvent<
    ContactCreatedEvent.InputTuple,
    ContactCreatedEvent.OutputTuple,
    ContactCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Received"
  ): TypedContractEvent<
    ReceivedEvent.InputTuple,
    ReceivedEvent.OutputTuple,
    ReceivedEvent.OutputObject
  >;

  filters: {
    "ContactCreated(string,string,uint256)": TypedContractEvent<
      ContactCreatedEvent.InputTuple,
      ContactCreatedEvent.OutputTuple,
      ContactCreatedEvent.OutputObject
    >;
    ContactCreated: TypedContractEvent<
      ContactCreatedEvent.InputTuple,
      ContactCreatedEvent.OutputTuple,
      ContactCreatedEvent.OutputObject
    >;

    "Received(address,uint256)": TypedContractEvent<
      ReceivedEvent.InputTuple,
      ReceivedEvent.OutputTuple,
      ReceivedEvent.OutputObject
    >;
    Received: TypedContractEvent<
      ReceivedEvent.InputTuple,
      ReceivedEvent.OutputTuple,
      ReceivedEvent.OutputObject
    >;
  };
}
